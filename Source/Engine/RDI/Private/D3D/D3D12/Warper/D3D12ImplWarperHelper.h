#pragma once
#include "Core/Macros/UtilMacros.h"
#include "D3D/Warper/D3DImplWarperHelper.h"

#include <sal.h>
#include <stdint.h>

#pragma region 自定义常量

constexpr uint32_t D3D12_TEXTURE_RESOLUTION = 1 << 13;
constexpr uint16_t D3D12_MIPMAPCOUNT = 13;
constexpr uint16_t D3D12_BACKBUFFER_COUNT = 8;

#pragma endregion

constexpr uint32_t D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
constexpr uint32_t D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES = std::numeric_limits<uint32_t>::max();
constexpr uint32_t D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;

using D3D12_GPU_VIRTUAL_ADDRESS = uint64_t;

enum class D3D12_COMMAND_LIST_TYPE
{
	D3D12_COMMAND_LIST_TYPE_DIRECT = 0,
	D3D12_COMMAND_LIST_TYPE_BUNDLE = 1,
	D3D12_COMMAND_LIST_TYPE_COMPUTE = 2,
	D3D12_COMMAND_LIST_TYPE_COPY = 3,
	D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE = 4,
	D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS = 5
};

enum class D3D12_COMMAND_QUEUE_FLAGS
{
	D3D12_COMMAND_QUEUE_FLAG_NONE = 0,
	D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT = 0x1
};
REGIST_ENUM_FLAG(D3D12_COMMAND_QUEUE_FLAGS);

enum class D3D12_COMMAND_QUEUE_PRIORITY
{
	D3D12_COMMAND_QUEUE_PRIORITY_NORMAL = 0,
	D3D12_COMMAND_QUEUE_PRIORITY_HIGH = 100,
	D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME = 10000
};

struct D3D12_COMMAND_QUEUE_DESC
{
	D3D12_COMMAND_LIST_TYPE Type;
	int32_t Priority;
	D3D12_COMMAND_QUEUE_FLAGS Flags;
	uint32_t NodeMask;
};


enum class D3D12_PRIMITIVE_TOPOLOGY_TYPE
{
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED = 0,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT = 1,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE = 2,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE = 3,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH = 4
};


enum class D3D12_INPUT_CLASSIFICATION
{
	D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA = 0,
	D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA = 1
};

struct D3D12_INPUT_ELEMENT_DESC
{
	const char* SemanticName;
	uint32_t SemanticIndex;
	DXGI_FORMAT Format;
	uint32_t InputSlot;
	uint32_t AlignedByteOffset;
	D3D12_INPUT_CLASSIFICATION InputSlotClass;
	uint32_t InstanceDataStepRate;
};


enum class D3D12_FILL_MODE
{
	D3D12_FILL_MODE_WIREFRAME = 2,
	D3D12_FILL_MODE_SOLID = 3
};

using D3D12_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY;
using D3D12_PRIMITIVE = D3D_PRIMITIVE;

enum class D3D12_CULL_MODE
{
	D3D12_CULL_MODE_NONE = 1,
	D3D12_CULL_MODE_FRONT = 2,
	D3D12_CULL_MODE_BACK = 3
};

struct D3D12_SO_DECLARATION_ENTRY
{
	uint32_t Stream;
	const char* SemanticName;
	uint32_t SemanticIndex;
	uint8_t StartComponent;
	uint8_t ComponentCount;
	uint8_t OutputSlot;
};

struct D3D12_VIEWPORT
{
	float TopLeftX;
	float TopLeftY;
	float Width;
	float Height;
	float MinDepth;
	float MaxDepth;
};

using D3D12_RECT = RECT;

struct D3D12_BOX
{
	uint32_t left;
	uint32_t top;
	uint32_t front;
	uint32_t right;
	uint32_t bottom;
	uint32_t back;
};


enum class D3D12_COMPARISON_FUNC
{
	D3D12_COMPARISON_FUNC_NEVER = 1,
	D3D12_COMPARISON_FUNC_LESS = 2,
	D3D12_COMPARISON_FUNC_EQUAL = 3,
	D3D12_COMPARISON_FUNC_LESS_EQUAL = 4,
	D3D12_COMPARISON_FUNC_GREATER = 5,
	D3D12_COMPARISON_FUNC_NOT_EQUAL = 6,
	D3D12_COMPARISON_FUNC_GREATER_EQUAL = 7,
	D3D12_COMPARISON_FUNC_ALWAYS = 8
};


enum class D3D12_DEPTH_WRITE_MASK
{
	D3D12_DEPTH_WRITE_MASK_ZERO = 0,
	D3D12_DEPTH_WRITE_MASK_ALL = 1
};


enum class D3D12_STENCIL_OP
{
	D3D12_STENCIL_OP_KEEP = 1,
	D3D12_STENCIL_OP_ZERO = 2,
	D3D12_STENCIL_OP_REPLACE = 3,
	D3D12_STENCIL_OP_INCR_SAT = 4,
	D3D12_STENCIL_OP_DECR_SAT = 5,
	D3D12_STENCIL_OP_INVERT = 6,
	D3D12_STENCIL_OP_INCR = 7,
	D3D12_STENCIL_OP_DECR = 8
};

struct D3D12_DEPTH_STENCILOP_DESC
{
	D3D12_STENCIL_OP StencilFailOp;
	D3D12_STENCIL_OP StencilDepthFailOp;
	D3D12_STENCIL_OP StencilPassOp;
	D3D12_COMPARISON_FUNC StencilFunc;
};

struct D3D12_DEPTH_STENCIL_DESC
{
	uint32_t DepthEnable;
	D3D12_DEPTH_WRITE_MASK DepthWriteMask;
	D3D12_COMPARISON_FUNC DepthFunc;
	uint32_t StencilEnable;
	uint8_t StencilReadMask;
	uint8_t StencilWriteMask;
	D3D12_DEPTH_STENCILOP_DESC FrontFace;
	D3D12_DEPTH_STENCILOP_DESC BackFace;
};

struct D3D12_DEPTH_STENCIL_DESC1
{
	uint32_t DepthEnable;
	D3D12_DEPTH_WRITE_MASK DepthWriteMask;
	D3D12_COMPARISON_FUNC DepthFunc;
	uint32_t StencilEnable;
	uint8_t StencilReadMask;
	uint8_t StencilWriteMask;
	D3D12_DEPTH_STENCILOP_DESC FrontFace;
	D3D12_DEPTH_STENCILOP_DESC BackFace;
	uint32_t DepthBoundsTestEnable;
};


enum class D3D12_BLEND
{
	D3D12_BLEND_ZERO = 1,
	D3D12_BLEND_ONE = 2,
	D3D12_BLEND_SRC_COLOR = 3,
	D3D12_BLEND_INV_SRC_COLOR = 4,
	D3D12_BLEND_SRC_ALPHA = 5,
	D3D12_BLEND_INV_SRC_ALPHA = 6,
	D3D12_BLEND_DEST_ALPHA = 7,
	D3D12_BLEND_INV_DEST_ALPHA = 8,
	D3D12_BLEND_DEST_COLOR = 9,
	D3D12_BLEND_INV_DEST_COLOR = 10,
	D3D12_BLEND_SRC_ALPHA_SAT = 11,
	D3D12_BLEND_BLEND_FACTOR = 14,
	D3D12_BLEND_INV_BLEND_FACTOR = 15,
	D3D12_BLEND_SRC1_COLOR = 16,
	D3D12_BLEND_INV_SRC1_COLOR = 17,
	D3D12_BLEND_SRC1_ALPHA = 18,
	D3D12_BLEND_INV_SRC1_ALPHA = 19
};


enum class D3D12_BLEND_OP
{
	D3D12_BLEND_OP_ADD = 1,
	D3D12_BLEND_OP_SUBTRACT = 2,
	D3D12_BLEND_OP_REV_SUBTRACT = 3,
	D3D12_BLEND_OP_MIN = 4,
	D3D12_BLEND_OP_MAX = 5
};


enum class D3D12_COLOR_WRITE_ENABLE : uint8_t
{
	D3D12_COLOR_WRITE_ENABLE_RED = 1,
	D3D12_COLOR_WRITE_ENABLE_GREEN = 2,
	D3D12_COLOR_WRITE_ENABLE_BLUE = 4,
	D3D12_COLOR_WRITE_ENABLE_ALPHA = 8,
	D3D12_COLOR_WRITE_ENABLE_ALL = (((D3D12_COLOR_WRITE_ENABLE_RED | D3D12_COLOR_WRITE_ENABLE_GREEN) | D3D12_COLOR_WRITE_ENABLE_BLUE) | D3D12_COLOR_WRITE_ENABLE_ALPHA)
};


enum class D3D12_LOGIC_OP
{
	D3D12_LOGIC_OP_CLEAR = 0,
	D3D12_LOGIC_OP_SET = (D3D12_LOGIC_OP_CLEAR + 1),
	D3D12_LOGIC_OP_COPY = (D3D12_LOGIC_OP_SET + 1),
	D3D12_LOGIC_OP_COPY_INVERTED = (D3D12_LOGIC_OP_COPY + 1),
	D3D12_LOGIC_OP_NOOP = (D3D12_LOGIC_OP_COPY_INVERTED + 1),
	D3D12_LOGIC_OP_INVERT = (D3D12_LOGIC_OP_NOOP + 1),
	D3D12_LOGIC_OP_AND = (D3D12_LOGIC_OP_INVERT + 1),
	D3D12_LOGIC_OP_NAND = (D3D12_LOGIC_OP_AND + 1),
	D3D12_LOGIC_OP_OR = (D3D12_LOGIC_OP_NAND + 1),
	D3D12_LOGIC_OP_NOR = (D3D12_LOGIC_OP_OR + 1),
	D3D12_LOGIC_OP_XOR = (D3D12_LOGIC_OP_NOR + 1),
	D3D12_LOGIC_OP_EQUIV = (D3D12_LOGIC_OP_XOR + 1),
	D3D12_LOGIC_OP_AND_REVERSE = (D3D12_LOGIC_OP_EQUIV + 1),
	D3D12_LOGIC_OP_AND_INVERTED = (D3D12_LOGIC_OP_AND_REVERSE + 1),
	D3D12_LOGIC_OP_OR_REVERSE = (D3D12_LOGIC_OP_AND_INVERTED + 1),
	D3D12_LOGIC_OP_OR_INVERTED = (D3D12_LOGIC_OP_OR_REVERSE + 1)
};

struct D3D12_RENDER_TARGET_BLEND_DESC
{
	uint32_t BlendEnable;
	uint32_t LogicOpEnable;
	D3D12_BLEND SrcBlend;
	D3D12_BLEND DestBlend;
	D3D12_BLEND_OP BlendOp;
	D3D12_BLEND SrcBlendAlpha;
	D3D12_BLEND DestBlendAlpha;
	D3D12_BLEND_OP BlendOpAlpha;
	D3D12_LOGIC_OP LogicOp;
	D3D12_COLOR_WRITE_ENABLE RenderTargetWriteMask;
};

struct D3D12_BLEND_DESC
{
	uint32_t AlphaToCoverageEnable;
	uint32_t IndependentBlendEnable;
	D3D12_RENDER_TARGET_BLEND_DESC RenderTarget[8];
};

/* Note, the array size for RenderTarget[] above is D3D12_SIMULTANEOUS_RENDERTARGET_COUNT.
   IDL processing/generation of this header replaces the define; this comment is merely explaining what happened. */

enum class D3D12_CONSERVATIVE_RASTERIZATION_MODE
{
	D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF = 0,
	D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON = 1
};

struct D3D12_RASTERIZER_DESC
{
	D3D12_FILL_MODE FillMode;
	D3D12_CULL_MODE CullMode;
	uint32_t FrontCounterClockwise;
	int32_t DepthBias;
	float DepthBiasClamp;
	float SlopeScaledDepthBias;
	uint32_t DepthClipEnable;
	uint32_t MultisampleEnable;
	uint32_t AntialiasedLineEnable;
	uint32_t ForcedSampleCount;
	D3D12_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster;
};

struct D3D12_SHADER_BYTECODE
{
	_Field_size_bytes_full_(BytecodeLength)  const void* pShaderBytecode;
	size_t BytecodeLength;
};

struct D3D12_STREAM_OUTPUT_DESC
{
	_Field_size_full_(NumEntries)  const D3D12_SO_DECLARATION_ENTRY* pSODeclaration;
	uint32_t NumEntries;
	_Field_size_full_(NumStrides)  const uint32_t* pBufferStrides;
	uint32_t NumStrides;
	uint32_t RasterizedStream;
};

struct D3D12_INPUT_LAYOUT_DESC
{
	_Field_size_full_(NumElements)  const D3D12_INPUT_ELEMENT_DESC* pInputElementDescs;
	uint32_t NumElements;
};


enum class D3D12_INDEX_BUFFER_STRIP_CUT_VALUE
{
	D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED = 0,
	D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF = 1,
	D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF = 2
};

struct D3D12_CACHED_PIPELINE_STATE
{
	_Field_size_bytes_full_(CachedBlobSizeInBytes)  const void* pCachedBlob;
	size_t CachedBlobSizeInBytes;
};


enum class D3D12_PIPELINE_STATE_FLAGS
{
	D3D12_PIPELINE_STATE_FLAG_NONE = 0,
	D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG = 0x1
};

REGIST_ENUM_FLAG(D3D12_PIPELINE_STATE_FLAGS);
struct D3D12_GRAPHICS_PIPELINE_STATE_DESC
{
	void* pRootSignature;
	D3D12_SHADER_BYTECODE VS;
	D3D12_SHADER_BYTECODE PS;
	D3D12_SHADER_BYTECODE DS;
	D3D12_SHADER_BYTECODE HS;
	D3D12_SHADER_BYTECODE GS;
	D3D12_STREAM_OUTPUT_DESC StreamOutput;
	D3D12_BLEND_DESC BlendState;
	uint32_t SampleMask;
	D3D12_RASTERIZER_DESC RasterizerState;
	D3D12_DEPTH_STENCIL_DESC DepthStencilState;
	D3D12_INPUT_LAYOUT_DESC InputLayout;
	D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue;
	D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType;
	uint32_t NumRenderTargets;
	DXGI_FORMAT RTVFormats[8];
	DXGI_FORMAT DSVFormat;
	DXGI_SAMPLE_DESC SampleDesc;
	uint32_t NodeMask;
	D3D12_CACHED_PIPELINE_STATE CachedPSO;
	D3D12_PIPELINE_STATE_FLAGS Flags;
};

struct D3D12_COMPUTE_PIPELINE_STATE_DESC
{
	void* pRootSignature;
	D3D12_SHADER_BYTECODE CS;
	uint32_t NodeMask;
	D3D12_CACHED_PIPELINE_STATE CachedPSO;
	D3D12_PIPELINE_STATE_FLAGS Flags;
};

struct D3D12_RT_FORMAT_ARRAY
{
	DXGI_FORMAT RTFormats[8];
	uint32_t NumRenderTargets;
};
struct D3D12_PIPELINE_STATE_STREAM_DESC
{
	_In_  size_t SizeInBytes;
	_In_reads_(_Inexpressible_("Dependent on size of subobjects"))  void* pPipelineStateSubobjectStream;
};


enum class D3D12_PIPELINE_STATE_SUBOBJECT_TYPE
{
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE = 0,
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1 = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1 + 1),
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING + 1)
};


enum class D3D12_FEATURE
{
	D3D12_FEATURE_D3D12_OPTIONS = 0,
	D3D12_FEATURE_ARCHITECTURE = 1,
	D3D12_FEATURE_FEATURE_LEVELS = 2,
	D3D12_FEATURE_FORMAT_SUPPORT = 3,
	D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS = 4,
	D3D12_FEATURE_FORMAT_INFO = 5,
	D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 6,
	D3D12_FEATURE_SHADER_MODEL = 7,
	D3D12_FEATURE_D3D12_OPTIONS1 = 8,
	D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT = 10,
	D3D12_FEATURE_ROOT_SIGNATURE = 12,
	D3D12_FEATURE_ARCHITECTURE1 = 16,
	D3D12_FEATURE_D3D12_OPTIONS2 = 18,
	D3D12_FEATURE_SHADER_CACHE = 19,
	D3D12_FEATURE_COMMAND_QUEUE_PRIORITY = 20,
	D3D12_FEATURE_D3D12_OPTIONS3 = 21,
	D3D12_FEATURE_EXISTING_HEAPS = 22,
	D3D12_FEATURE_D3D12_OPTIONS4 = 23,
	D3D12_FEATURE_SERIALIZATION = 24,
	D3D12_FEATURE_CROSS_NODE = 25,
	D3D12_FEATURE_D3D12_OPTIONS5 = 27
};


enum class D3D12_SHADER_MIN_PRECISION_SUPPORT
{
	D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE = 0,
	D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT = 0x1,
	D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT = 0x2
};

REGIST_ENUM_FLAG(D3D12_SHADER_MIN_PRECISION_SUPPORT);

enum class D3D12_TILED_RESOURCES_TIER
{
	D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED = 0,
	D3D12_TILED_RESOURCES_TIER_1 = 1,
	D3D12_TILED_RESOURCES_TIER_2 = 2,
	D3D12_TILED_RESOURCES_TIER_3 = 3,
	D3D12_TILED_RESOURCES_TIER_4 = 4
};


enum class D3D12_RESOURCE_BINDING_TIER
{
	D3D12_RESOURCE_BINDING_TIER_1 = 1,
	D3D12_RESOURCE_BINDING_TIER_2 = 2,
	D3D12_RESOURCE_BINDING_TIER_3 = 3
};


enum class D3D12_CONSERVATIVE_RASTERIZATION_TIER
{
	D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED = 0,
	D3D12_CONSERVATIVE_RASTERIZATION_TIER_1 = 1,
	D3D12_CONSERVATIVE_RASTERIZATION_TIER_2 = 2,
	D3D12_CONSERVATIVE_RASTERIZATION_TIER_3 = 3
};


enum class D3D12_FORMAT_SUPPORT1
{
	D3D12_FORMAT_SUPPORT1_NONE = 0,
	D3D12_FORMAT_SUPPORT1_BUFFER = 0x1,
	D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER = 0x2,
	D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER = 0x4,
	D3D12_FORMAT_SUPPORT1_SO_BUFFER = 0x8,
	D3D12_FORMAT_SUPPORT1_TEXTURE1D = 0x10,
	D3D12_FORMAT_SUPPORT1_TEXTURE2D = 0x20,
	D3D12_FORMAT_SUPPORT1_TEXTURE3D = 0x40,
	D3D12_FORMAT_SUPPORT1_TEXTURECUBE = 0x80,
	D3D12_FORMAT_SUPPORT1_SHADER_LOAD = 0x100,
	D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE = 0x200,
	D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON = 0x400,
	D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT = 0x800,
	D3D12_FORMAT_SUPPORT1_MIP = 0x1000,
	D3D12_FORMAT_SUPPORT1_RENDER_TARGET = 0x4000,
	D3D12_FORMAT_SUPPORT1_BLENDABLE = 0x8000,
	D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL = 0x10000,
	D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE = 0x40000,
	D3D12_FORMAT_SUPPORT1_DISPLAY = 0x80000,
	D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT = 0x100000,
	D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET = 0x200000,
	D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD = 0x400000,
	D3D12_FORMAT_SUPPORT1_SHADER_GATHER = 0x800000,
	D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST = 0x1000000,
	D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW = 0x2000000,
	D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON = 0x4000000,
	D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT = 0x8000000,
	D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT = 0x10000000,
	D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT = 0x20000000,
	D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER = 0x40000000
};

REGIST_ENUM_FLAG(D3D12_FORMAT_SUPPORT1);

enum class D3D12_FORMAT_SUPPORT2
{
	D3D12_FORMAT_SUPPORT2_NONE = 0,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 0x1,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 0x2,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x4,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 0x8,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x10,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x20,
	D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 0x40,
	D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE = 0x80,
	D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 0x100,
	D3D12_FORMAT_SUPPORT2_TILED = 0x200,
	D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 0x4000
};

REGIST_ENUM_FLAG(D3D12_FORMAT_SUPPORT2);

enum class D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS
{
	D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE = 0,
	D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE = 0x1
};

REGIST_ENUM_FLAG(D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS);

enum class D3D12_CROSS_NODE_SHARING_TIER
{
	D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED = 0,
	D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED = 1,
	D3D12_CROSS_NODE_SHARING_TIER_1 = 2,
	D3D12_CROSS_NODE_SHARING_TIER_2 = 3,
	D3D12_CROSS_NODE_SHARING_TIER_3 = 4
};


enum class D3D12_RESOURCE_HEAP_TIER
{
	D3D12_RESOURCE_HEAP_TIER_1 = 1,
	D3D12_RESOURCE_HEAP_TIER_2 = 2
};


enum class D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER
{
	D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED = 0,
	D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1 = 1,
	D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2 = 2
};


enum class D3D12_VIEW_INSTANCING_TIER
{
	D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED = 0,
	D3D12_VIEW_INSTANCING_TIER_1 = 1,
	D3D12_VIEW_INSTANCING_TIER_2 = 2,
	D3D12_VIEW_INSTANCING_TIER_3 = 3
};

struct D3D12_FEATURE_DATA_D3D12_OPTIONS
{
	_Out_  uint32_t DoublePrecisionFloatShaderOps;
	_Out_  uint32_t OutputMergerLogicOp;
	_Out_  D3D12_SHADER_MIN_PRECISION_SUPPORT MinPrecisionSupport;
	_Out_  D3D12_TILED_RESOURCES_TIER TiledResourcesTier;
	_Out_  D3D12_RESOURCE_BINDING_TIER ResourceBindingTier;
	_Out_  uint32_t PSSpecifiedStencilRefSupported;
	_Out_  uint32_t TypedUAVLoadAdditionalFormats;
	_Out_  uint32_t ROVsSupported;
	_Out_  D3D12_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
	_Out_  uint32_t MaxGPUVirtualAddressBitsPerResource;
	_Out_  uint32_t StandardSwizzle64KBSupported;
	_Out_  D3D12_CROSS_NODE_SHARING_TIER CrossNodeSharingTier;
	_Out_  uint32_t CrossAdapterRowMajorTextureSupported;
	_Out_  uint32_t VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;
	_Out_  D3D12_RESOURCE_HEAP_TIER ResourceHeapTier;
};

struct D3D12_FEATURE_DATA_D3D12_OPTIONS1
{
	_Out_  uint32_t WaveOps;
	_Out_  uint32_t WaveLaneCountMin;
	_Out_  uint32_t WaveLaneCountMax;
	_Out_  uint32_t TotalLaneCount;
	_Out_  uint32_t ExpandedComputeResourceStates;
	_Out_  uint32_t Int64ShaderOps;
};

struct D3D12_FEATURE_DATA_D3D12_OPTIONS2
{
	_Out_  uint32_t DepthBoundsTestSupported;
	_Out_  D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER ProgrammableSamplePositionsTier;
};


enum class D3D_ROOT_SIGNATURE_VERSION
{
	D3D_ROOT_SIGNATURE_VERSION_1 = 0x1,
	D3D_ROOT_SIGNATURE_VERSION_1_0 = 0x1,
	D3D_ROOT_SIGNATURE_VERSION_1_1 = 0x2
};

struct D3D12_FEATURE_DATA_ROOT_SIGNATURE
{
	_Inout_  D3D_ROOT_SIGNATURE_VERSION HighestVersion;
};

struct D3D12_FEATURE_DATA_ARCHITECTURE
{
	_In_  uint32_t NodeIndex;
	_Out_  uint32_t TileBasedRenderer;
	_Out_  uint32_t UMA;
	_Out_  uint32_t CacheCoherentUMA;
};

struct D3D12_FEATURE_DATA_ARCHITECTURE1
{
	_In_  uint32_t NodeIndex;
	_Out_  uint32_t TileBasedRenderer;
	_Out_  uint32_t UMA;
	_Out_  uint32_t CacheCoherentUMA;
	_Out_  uint32_t IsolatedMMU;
};

struct D3D12_FEATURE_DATA_FEATURE_LEVELS
{
	_In_  uint32_t NumFeatureLevels;
	_In_reads_(NumFeatureLevels)  const D3D_FEATURE_LEVEL* pFeatureLevelsRequested;
	_Out_  D3D_FEATURE_LEVEL MaxSupportedFeatureLevel;
};


enum class D3D_SHADER_MODEL
{
	D3D_SHADER_MODEL_5_1 = 0x51,
	D3D_SHADER_MODEL_6_0 = 0x60,
	D3D_SHADER_MODEL_6_1 = 0x61,
	D3D_SHADER_MODEL_6_2 = 0x62,
	D3D_SHADER_MODEL_6_3 = 0x63,
	D3D_SHADER_MODEL_6_4 = 0x64
};

struct D3D12_FEATURE_DATA_SHADER_MODEL
{
	_Inout_  D3D_SHADER_MODEL HighestShaderModel;
};

struct D3D12_FEATURE_DATA_FORMAT_SUPPORT
{
	_In_  DXGI_FORMAT Format;
	_Out_  D3D12_FORMAT_SUPPORT1 Support1;
	_Out_  D3D12_FORMAT_SUPPORT2 Support2;
};

struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS
{
	_In_  DXGI_FORMAT Format;
	_In_  uint32_t SampleCount;
	_In_  D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS Flags;
	_Out_  uint32_t NumQualityLevels;
};

struct D3D12_FEATURE_DATA_FORMAT_INFO
{
	DXGI_FORMAT Format;
	uint8_t PlaneCount;
};

struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
{
	uint32_t MaxGPUVirtualAddressBitsPerResource;
	uint32_t MaxGPUVirtualAddressBitsPerProcess;
};


enum class D3D12_SHADER_CACHE_SUPPORT_FLAGS
{
	D3D12_SHADER_CACHE_SUPPORT_NONE = 0,
	D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO = 0x1,
	D3D12_SHADER_CACHE_SUPPORT_LIBRARY = 0x2,
	D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 0x4,
	D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 0x8
};

REGIST_ENUM_FLAG(D3D12_SHADER_CACHE_SUPPORT_FLAGS);
struct D3D12_FEATURE_DATA_SHADER_CACHE
{
	_Out_  D3D12_SHADER_CACHE_SUPPORT_FLAGS SupportFlags;
};

struct D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY
{
	_In_  D3D12_COMMAND_LIST_TYPE CommandListType;
	_In_  uint32_t Priority;
	_Out_  uint32_t PriorityForTypeIsSupported;
};


enum class D3D12_COMMAND_LIST_SUPPORT_FLAGS
{
	D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE = 0,
	D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT = (1 << EnumToInt(D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_DIRECT)),
	D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE = (1 << EnumToInt(D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_BUNDLE)),
	D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE = (1 << EnumToInt(D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_COMPUTE)),
	D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY = (1 << EnumToInt(D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_COPY)),
	D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE = (1 << EnumToInt(D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE)),
	D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS = (1 << EnumToInt(D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS))
};

REGIST_ENUM_FLAG(D3D12_COMMAND_LIST_SUPPORT_FLAGS);
struct D3D12_FEATURE_DATA_D3D12_OPTIONS3
{
	_Out_  uint32_t CopyQueueTimestampQueriesSupported;
	_Out_  uint32_t CastingFullyTypedFormatSupported;
	_Out_  D3D12_COMMAND_LIST_SUPPORT_FLAGS WriteBufferImmediateSupportFlags;
	_Out_  D3D12_VIEW_INSTANCING_TIER ViewInstancingTier;
	_Out_  uint32_t BarycentricsSupported;
};

struct D3D12_FEATURE_DATA_EXISTING_HEAPS
{
	_Out_  uint32_t Supported;
};


enum class D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER
{
	D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0 = 0,
	D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1 = (D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0 + 1)
};

struct D3D12_FEATURE_DATA_D3D12_OPTIONS4
{
	_Out_  uint32_t MSAA64KBAlignedTextureSupported;
	_Out_  D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER SharedResourceCompatibilityTier;
	_Out_  uint32_t Native16BitShaderOpsSupported;
};


enum class D3D12_HEAP_SERIALIZATION_TIER
{
	D3D12_HEAP_SERIALIZATION_TIER_0 = 0,
	D3D12_HEAP_SERIALIZATION_TIER_10 = 10
};

struct D3D12_FEATURE_DATA_SERIALIZATION
{
	_In_  uint32_t NodeIndex;
	_Out_  D3D12_HEAP_SERIALIZATION_TIER HeapSerializationTier;
};

struct D3D12_FEATURE_DATA_CROSS_NODE
{
	D3D12_CROSS_NODE_SHARING_TIER SharingTier;
	uint32_t AtomicShaderInstructions;
};


enum class D3D12_RENDER_PASS_TIER
{
	D3D12_RENDER_PASS_TIER_0 = 0,
	D3D12_RENDER_PASS_TIER_1 = 1,
	D3D12_RENDER_PASS_TIER_2 = 2
};


enum class D3D12_RAYTRACING_TIER
{
	D3D12_RAYTRACING_TIER_NOT_SUPPORTED = 0,
	D3D12_RAYTRACING_TIER_1_0 = 10
};

struct D3D12_FEATURE_DATA_D3D12_OPTIONS5
{
	_Out_  uint32_t SRVOnlyTiledResourceTier3;
	_Out_  D3D12_RENDER_PASS_TIER RenderPassesTier;
	_Out_  D3D12_RAYTRACING_TIER RaytracingTier;
};

struct D3D12_RESOURCE_ALLOCATION_INFO
{
	uint64_t SizeInBytes;
	uint64_t Alignment;
};

struct D3D12_RESOURCE_ALLOCATION_INFO1
{
	uint64_t Offset;
	uint64_t Alignment;
	uint64_t SizeInBytes;
};


enum class D3D12_HEAP_TYPE
{
	D3D12_HEAP_TYPE_DEFAULT = 1,
	D3D12_HEAP_TYPE_UPLOAD = 2,
	D3D12_HEAP_TYPE_READBACK = 3,
	D3D12_HEAP_TYPE_CUSTOM = 4
};


enum class D3D12_CPU_PAGE_PROPERTY
{
	D3D12_CPU_PAGE_PROPERTY_UNKNOWN = 0,
	D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE = 1,
	D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE = 2,
	D3D12_CPU_PAGE_PROPERTY_WRITE_BACK = 3
};


enum class D3D12_MEMORY_POOL
{
	D3D12_MEMORY_POOL_UNKNOWN = 0,
	D3D12_MEMORY_POOL_L0 = 1,
	D3D12_MEMORY_POOL_L1 = 2
};

struct D3D12_HEAP_PROPERTIES
{
	D3D12_HEAP_TYPE Type;
	D3D12_CPU_PAGE_PROPERTY CPUPageProperty;
	D3D12_MEMORY_POOL MemoryPoolPreference;
	uint32_t CreationNodeMask;
	uint32_t VisibleNodeMask;
};


enum class D3D12_HEAP_FLAGS
{
	D3D12_HEAP_FLAG_NONE = 0,
	D3D12_HEAP_FLAG_SHARED = 0x1,
	D3D12_HEAP_FLAG_DENY_BUFFERS = 0x4,
	D3D12_HEAP_FLAG_ALLOW_DISPLAY = 0x8,
	D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER = 0x20,
	D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES = 0x40,
	D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES = 0x80,
	D3D12_HEAP_FLAG_HARDWARE_PROTECTED = 0x100,
	D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH = 0x200,
	D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS = 0x400,
	D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES = 0,
	D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS = 0xc0,
	D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES = 0x44,
	D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES = 0x84
};

REGIST_ENUM_FLAG(D3D12_HEAP_FLAGS);
struct D3D12_HEAP_DESC
{
	uint64_t SizeInBytes;
	D3D12_HEAP_PROPERTIES Properties;
	uint64_t Alignment;
	D3D12_HEAP_FLAGS Flags;
};


enum class D3D12_RESOURCE_DIMENSION
{
	D3D12_RESOURCE_DIMENSION_UNKNOWN = 0,
	D3D12_RESOURCE_DIMENSION_BUFFER = 1,
	D3D12_RESOURCE_DIMENSION_TEXTURE1D = 2,
	D3D12_RESOURCE_DIMENSION_TEXTURE2D = 3,
	D3D12_RESOURCE_DIMENSION_TEXTURE3D = 4
};


enum class D3D12_TEXTURE_LAYOUT
{
	D3D12_TEXTURE_LAYOUT_UNKNOWN = 0,
	D3D12_TEXTURE_LAYOUT_ROW_MAJOR = 1,
	D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE = 2,
	D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE = 3
};


enum class D3D12_RESOURCE_FLAGS
{
	D3D12_RESOURCE_FLAG_NONE = 0,
	D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = 0x1,
	D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = 0x2,
	D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = 0x4,
	D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = 0x8,
	D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = 0x10,
	D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = 0x20,
	D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY = 0x40
};

REGIST_ENUM_FLAG(D3D12_RESOURCE_FLAGS);
struct D3D12_RESOURCE_DESC
{
	D3D12_RESOURCE_DIMENSION Dimension;
	uint64_t Alignment;
	uint64_t Width;
	uint32_t Height;
	uint16_t DepthOrArraySize;
	uint16_t MipLevels;
	DXGI_FORMAT Format;
	DXGI_SAMPLE_DESC SampleDesc;
	D3D12_TEXTURE_LAYOUT Layout;
	D3D12_RESOURCE_FLAGS Flags;
};

struct D3D12_DEPTH_STENCIL_VALUE
{
	float Depth;
	uint8_t Stencil;
};

struct D3D12_CLEAR_VALUE
{
	DXGI_FORMAT Format;
	union
	{
		float Color[4];
		D3D12_DEPTH_STENCIL_VALUE DepthStencil;
	};
};

struct D3D12_RANGE
{
	size_t Begin;
	size_t End;
};

struct D3D12_RANGE_uint64_t
{
	uint64_t Begin;
	uint64_t End;
};

struct D3D12_SUBRESOURCE_RANGE_uint64_t
{
	uint32_t Subresource;
	D3D12_RANGE_uint64_t Range;
};

struct D3D12_SUBRESOURCE_INFO
{
	uint64_t Offset;
	uint32_t RowPitch;
	uint32_t DepthPitch;
};

struct D3D12_TILED_RESOURCE_COORDINATE
{
	uint32_t X;
	uint32_t Y;
	uint32_t Z;
	uint32_t Subresource;
};

struct D3D12_TILE_REGION_SIZE
{
	uint32_t NumTiles;
	uint32_t UseBox;
	uint32_t Width;
	uint16_t Height;
	uint16_t Depth;
};


enum class D3D12_TILE_RANGE_FLAGS
{
	D3D12_TILE_RANGE_FLAG_NONE = 0,
	D3D12_TILE_RANGE_FLAG_NULL = 1,
	D3D12_TILE_RANGE_FLAG_SKIP = 2,
	D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE = 4
};

struct D3D12_SUBRESOURCE_TILING
{
	uint32_t WidthInTiles;
	uint16_t HeightInTiles;
	uint16_t DepthInTiles;
	uint32_t StartTileIndexInOverallResource;
};

struct D3D12_TILE_SHAPE
{
	uint32_t WidthInTexels;
	uint32_t HeightInTexels;
	uint32_t DepthInTexels;
};

struct D3D12_PACKED_MIP_INFO
{
	uint8_t NumStandardMips;
	uint8_t NumPackedMips;
	uint32_t NumTilesForPackedMips;
	uint32_t StartTileIndexInOverallResource;
};


enum class D3D12_TILE_MAPPING_FLAGS
{
	D3D12_TILE_MAPPING_FLAG_NONE = 0,
	D3D12_TILE_MAPPING_FLAG_NO_HAZARD = 0x1
};

REGIST_ENUM_FLAG(D3D12_TILE_MAPPING_FLAGS);

enum class D3D12_TILE_COPY_FLAGS
{
	D3D12_TILE_COPY_FLAG_NONE = 0,
	D3D12_TILE_COPY_FLAG_NO_HAZARD = 0x1,
	D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 0x2,
	D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 0x4
};

REGIST_ENUM_FLAG(D3D12_TILE_COPY_FLAGS);

enum class D3D12_RESOURCE_STATES
{
	D3D12_RESOURCE_STATE_COMMON = 0,
	D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER = 0x1,
	D3D12_RESOURCE_STATE_INDEX_BUFFER = 0x2,
	D3D12_RESOURCE_STATE_RENDER_TARGET = 0x4,
	D3D12_RESOURCE_STATE_UNORDERED_ACCESS = 0x8,
	D3D12_RESOURCE_STATE_DEPTH_WRITE = 0x10,
	D3D12_RESOURCE_STATE_DEPTH_READ = 0x20,
	D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE = 0x40,
	D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE = 0x80,
	D3D12_RESOURCE_STATE_STREAM_OUT = 0x100,
	D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT = 0x200,
	D3D12_RESOURCE_STATE_COPY_DEST = 0x400,
	D3D12_RESOURCE_STATE_COPY_SOURCE = 0x800,
	D3D12_RESOURCE_STATE_RESOLVE_DEST = 0x1000,
	D3D12_RESOURCE_STATE_RESOLVE_SOURCE = 0x2000,
	D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE = 0x400000,
	D3D12_RESOURCE_STATE_GENERIC_READ = (((((0x1 | 0x2) | 0x40) | 0x80) | 0x200) | 0x800),
	D3D12_RESOURCE_STATE_PRESENT = 0,
	D3D12_RESOURCE_STATE_PREDICATION = 0x200,
	D3D12_RESOURCE_STATE_VIDEO_DECODE_READ = 0x10000,
	D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE = 0x20000,
	D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ = 0x40000,
	D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE = 0x80000,
	D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ = 0x200000,
	D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE = 0x800000
};

REGIST_ENUM_FLAG(D3D12_RESOURCE_STATES);

enum class D3D12_RESOURCE_BARRIER_TYPE
{
	D3D12_RESOURCE_BARRIER_TYPE_TRANSITION = 0,
	D3D12_RESOURCE_BARRIER_TYPE_ALIASING = (D3D12_RESOURCE_BARRIER_TYPE_TRANSITION + 1),
	D3D12_RESOURCE_BARRIER_TYPE_UAV = (D3D12_RESOURCE_BARRIER_TYPE_ALIASING + 1)
};

struct D3D12_RESOURCE_TRANSITION_BARRIER
{
	void* pResource;
	uint32_t Subresource;
	D3D12_RESOURCE_STATES StateBefore;
	D3D12_RESOURCE_STATES StateAfter;
};

struct D3D12_RESOURCE_ALIASING_BARRIER
{
	void* pResourceBefore;
	void* pResourceAfter;
};

struct D3D12_RESOURCE_UAV_BARRIER
{
	void* pResource;
};


enum class D3D12_RESOURCE_BARRIER_FLAGS
{
	D3D12_RESOURCE_BARRIER_FLAG_NONE = 0,
	D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY = 0x1,
	D3D12_RESOURCE_BARRIER_FLAG_END_ONLY = 0x2
};

REGIST_ENUM_FLAG(D3D12_RESOURCE_BARRIER_FLAGS);
struct D3D12_RESOURCE_BARRIER
{
	D3D12_RESOURCE_BARRIER_TYPE Type;
	D3D12_RESOURCE_BARRIER_FLAGS Flags;
	union
	{
		D3D12_RESOURCE_TRANSITION_BARRIER Transition;
		D3D12_RESOURCE_ALIASING_BARRIER Aliasing;
		D3D12_RESOURCE_UAV_BARRIER UAV;
	};
};

struct D3D12_SUBRESOURCE_FOOTPRINT
{
	DXGI_FORMAT Format;
	uint32_t Width;
	uint32_t Height;
	uint32_t Depth;
	uint32_t RowPitch;
};

struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT
{
	uint64_t Offset;
	D3D12_SUBRESOURCE_FOOTPRINT Footprint;
};


enum class D3D12_TEXTURE_COPY_TYPE
{
	D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX = 0,
	D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT = 1
};

struct D3D12_TEXTURE_COPY_LOCATION
{
	void* pResource;
	D3D12_TEXTURE_COPY_TYPE Type;
	union
	{
		D3D12_PLACED_SUBRESOURCE_FOOTPRINT PlacedFootprint;
		uint32_t SubresourceIndex;
	};
};


enum class D3D12_RESOLVE_MODE
{
	D3D12_RESOLVE_MODE_DECOMPRESS = 0,
	D3D12_RESOLVE_MODE_MIN = 1,
	D3D12_RESOLVE_MODE_MAX = 2,
	D3D12_RESOLVE_MODE_AVERAGE = 3
};

struct D3D12_SAMPLE_POSITION
{
	int8_t X;
	int8_t Y;
};

struct D3D12_VIEW_INSTANCE_LOCATION
{
	uint32_t ViewportArrayIndex;
	uint32_t RenderTargetArrayIndex;
};


enum class D3D12_VIEW_INSTANCING_FLAGS
{
	D3D12_VIEW_INSTANCING_FLAG_NONE = 0,
	D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING = 0x1
};

REGIST_ENUM_FLAG(D3D12_VIEW_INSTANCING_FLAGS);
struct D3D12_VIEW_INSTANCING_DESC
{
	uint32_t ViewInstanceCount;
	_Field_size_full_(ViewInstanceCount)  const D3D12_VIEW_INSTANCE_LOCATION* pViewInstanceLocations;
	D3D12_VIEW_INSTANCING_FLAGS Flags;
};


enum class D3D12_SHADER_COMPONENT_MAPPING
{
	D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0 = 0,
	D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 = 1,
	D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2 = 2,
	D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3 = 3,
	D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0 = 4,
	D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1 = 5
};

#define D3D12_SHADER_COMPONENT_MAPPING_MASK 0x7 
#define D3D12_SHADER_COMPONENT_MAPPING_SHIFT 3 
#define D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES (1<<(D3D12_SHADER_COMPONENT_MAPPING_SHIFT*4)) 
#define D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING(Src0,Src1,Src2,Src3) ((((Src0)&D3D12_SHADER_COMPONENT_MAPPING_MASK)| \
                                                                (((Src1)&D3D12_SHADER_COMPONENT_MAPPING_MASK)<<D3D12_SHADER_COMPONENT_MAPPING_SHIFT)| \
                                                                (((Src2)&D3D12_SHADER_COMPONENT_MAPPING_MASK)<<(D3D12_SHADER_COMPONENT_MAPPING_SHIFT*2))| \
                                                                (((Src3)&D3D12_SHADER_COMPONENT_MAPPING_MASK)<<(D3D12_SHADER_COMPONENT_MAPPING_SHIFT*3))| \
                                                                D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES))
#define D3D12_DECODE_SHADER_4_COMPONENT_MAPPING(ComponentToExtract,Mapping) ((D3D12_SHADER_COMPONENT_MAPPING)(Mapping >> (D3D12_SHADER_COMPONENT_MAPPING_SHIFT*ComponentToExtract) & D3D12_SHADER_COMPONENT_MAPPING_MASK))
#define D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING(0,1,2,3) 

enum class D3D12_BUFFER_SRV_FLAGS
{
	D3D12_BUFFER_SRV_FLAG_NONE = 0,
	D3D12_BUFFER_SRV_FLAG_RAW = 0x1
};

REGIST_ENUM_FLAG(D3D12_BUFFER_SRV_FLAGS);
struct D3D12_BUFFER_SRV
{
	uint64_t FirstElement;
	uint32_t NumElements;
	uint32_t StructureByteStride;
	D3D12_BUFFER_SRV_FLAGS Flags;
};

struct D3D12_TEX1D_SRV
{
	uint32_t MostDetailedMip;
	uint32_t MipLevels;
	float ResourceMinLODClamp;
};

struct D3D12_TEX1D_ARRAY_SRV
{
	uint32_t MostDetailedMip;
	uint32_t MipLevels;
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
	float ResourceMinLODClamp;
};

struct D3D12_TEX2D_SRV
{
	uint32_t MostDetailedMip;
	uint32_t MipLevels;
	uint32_t PlaneSlice;
	float ResourceMinLODClamp;
};

struct D3D12_TEX2D_ARRAY_SRV
{
	uint32_t MostDetailedMip;
	uint32_t MipLevels;
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
	uint32_t PlaneSlice;
	float ResourceMinLODClamp;
};

struct D3D12_TEX3D_SRV
{
	uint32_t MostDetailedMip;
	uint32_t MipLevels;
	float ResourceMinLODClamp;
};

struct D3D12_TEXCUBE_SRV
{
	uint32_t MostDetailedMip;
	uint32_t MipLevels;
	float ResourceMinLODClamp;
};

struct D3D12_TEXCUBE_ARRAY_SRV
{
	uint32_t MostDetailedMip;
	uint32_t MipLevels;
	uint32_t First2DArrayFace;
	uint32_t NumCubes;
	float ResourceMinLODClamp;
};

struct D3D12_TEX2DMS_SRV
{
	uint32_t UnusedField_NothingToDefine;
};

struct D3D12_TEX2DMS_ARRAY_SRV
{
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
};

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV
{
	D3D12_GPU_VIRTUAL_ADDRESS Location;
};


enum class D3D12_SRV_DIMENSION
{
	D3D12_SRV_DIMENSION_UNKNOWN = 0,
	D3D12_SRV_DIMENSION_BUFFER = 1,
	D3D12_SRV_DIMENSION_TEXTURE1D = 2,
	D3D12_SRV_DIMENSION_TEXTURE1DARRAY = 3,
	D3D12_SRV_DIMENSION_TEXTURE2D = 4,
	D3D12_SRV_DIMENSION_TEXTURE2DARRAY = 5,
	D3D12_SRV_DIMENSION_TEXTURE2DMS = 6,
	D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
	D3D12_SRV_DIMENSION_TEXTURE3D = 8,
	D3D12_SRV_DIMENSION_TEXTURECUBE = 9,
	D3D12_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
	D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE = 11
};

struct D3D12_SHADER_RESOURCE_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D12_SRV_DIMENSION ViewDimension;
	uint32_t Shader4ComponentMapping;
	union
	{
		D3D12_BUFFER_SRV Buffer;
		D3D12_TEX1D_SRV Texture1D;
		D3D12_TEX1D_ARRAY_SRV Texture1DArray;
		D3D12_TEX2D_SRV Texture2D;
		D3D12_TEX2D_ARRAY_SRV Texture2DArray;
		D3D12_TEX2DMS_SRV Texture2DMS;
		D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray;
		D3D12_TEX3D_SRV Texture3D;
		D3D12_TEXCUBE_SRV TextureCube;
		D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray;
		D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV RaytracingAccelerationStructure;
	};
};

struct D3D12_CONSTANT_BUFFER_VIEW_DESC
{
	D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
	uint32_t SizeInBytes;
};


enum class D3D12_FILTER
{
	D3D12_FILTER_MIN_MAG_MIP_POINT = 0,
	D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
	D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
	D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
	D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
	D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
	D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
	D3D12_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
	D3D12_FILTER_ANISOTROPIC = 0x55,
	D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
	D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
	D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
	D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
	D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
	D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
	D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
	D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
	D3D12_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
	D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x100,
	D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
	D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
	D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
	D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
	D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
	D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
	D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
	D3D12_FILTER_MINIMUM_ANISOTROPIC = 0x155,
	D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
	D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
	D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
	D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
	D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
	D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
	D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
	D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
	D3D12_FILTER_MAXIMUM_ANISOTROPIC = 0x1d5
};


enum class D3D12_FILTER_TYPE
{
	D3D12_FILTER_TYPE_POINT = 0,
	D3D12_FILTER_TYPE_LINEAR = 1
};


enum class D3D12_FILTER_REDUCTION_TYPE
{
	D3D12_FILTER_REDUCTION_TYPE_STANDARD = 0,
	D3D12_FILTER_REDUCTION_TYPE_COMPARISON = 1,
	D3D12_FILTER_REDUCTION_TYPE_MINIMUM = 2,
	D3D12_FILTER_REDUCTION_TYPE_MAXIMUM = 3
};

#define	D3D12_FILTER_REDUCTION_TYPE_MASK	( 0x3 )

#define	D3D12_FILTER_REDUCTION_TYPE_SHIFT	( 7 )

#define	D3D12_FILTER_TYPE_MASK	( 0x3 )

#define	D3D12_MIN_FILTER_SHIFT	( 4 )

#define	D3D12_MAG_FILTER_SHIFT	( 2 )

#define	D3D12_MIP_FILTER_SHIFT	( 0 )

#define	D3D12_ANISOTROPIC_FILTERING_BIT	( 0x40 )

#define D3D12_ENCODE_BASIC_FILTER( min, mag, mip, reduction )                                                     \
                                   ( ( D3D12_FILTER ) (                                                           \
                                   ( ( ( min ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MIN_FILTER_SHIFT ) |           \
                                   ( ( ( mag ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MAG_FILTER_SHIFT ) |           \
                                   ( ( ( mip ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MIP_FILTER_SHIFT ) |           \
                                   ( ( ( reduction ) & D3D12_FILTER_REDUCTION_TYPE_MASK ) << D3D12_FILTER_REDUCTION_TYPE_SHIFT ) ) ) 
#define D3D12_ENCODE_ANISOTROPIC_FILTER( reduction )                                                  \
                                         ( ( D3D12_FILTER ) (                                         \
                                         D3D12_ANISOTROPIC_FILTERING_BIT |                            \
                                         D3D12_ENCODE_BASIC_FILTER( D3D12_FILTER_TYPE_LINEAR,         \
                                                                    D3D12_FILTER_TYPE_LINEAR,         \
                                                                    D3D12_FILTER_TYPE_LINEAR,         \
                                                                    reduction ) ) )                     
#define D3D12_DECODE_MIN_FILTER( D3D12Filter )                                                              \
                                 ( ( D3D12_FILTER_TYPE )                                                    \
                                 ( ( ( D3D12Filter ) >> D3D12_MIN_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK ) ) 
#define D3D12_DECODE_MAG_FILTER( D3D12Filter )                                                              \
                                 ( ( D3D12_FILTER_TYPE )                                                    \
                                 ( ( ( D3D12Filter ) >> D3D12_MAG_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK ) ) 
#define D3D12_DECODE_MIP_FILTER( D3D12Filter )                                                              \
                                 ( ( D3D12_FILTER_TYPE )                                                    \
                                 ( ( ( D3D12Filter ) >> D3D12_MIP_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK ) ) 
#define D3D12_DECODE_FILTER_REDUCTION( D3D12Filter )                                                        \
                                 ( ( D3D12_FILTER_REDUCTION_TYPE )                                                      \
                                 ( ( ( D3D12Filter ) >> D3D12_FILTER_REDUCTION_TYPE_SHIFT ) & D3D12_FILTER_REDUCTION_TYPE_MASK ) ) 
#define D3D12_DECODE_IS_COMPARISON_FILTER( D3D12Filter )                                                    \
                                 ( D3D12_DECODE_FILTER_REDUCTION( D3D12Filter ) == D3D12_FILTER_REDUCTION_TYPE_COMPARISON ) 
#define D3D12_DECODE_IS_ANISOTROPIC_FILTER( D3D12Filter )                                               \
                            ( ( ( D3D12Filter ) & D3D12_ANISOTROPIC_FILTERING_BIT ) &&                  \
                            ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIN_FILTER( D3D12Filter ) ) &&   \
                            ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MAG_FILTER( D3D12Filter ) ) &&   \
                            ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIP_FILTER( D3D12Filter ) ) )      

enum class D3D12_TEXTURE_ADDRESS_MODE
{
	D3D12_TEXTURE_ADDRESS_MODE_WRAP = 1,
	D3D12_TEXTURE_ADDRESS_MODE_MIRROR = 2,
	D3D12_TEXTURE_ADDRESS_MODE_CLAMP = 3,
	D3D12_TEXTURE_ADDRESS_MODE_BORDER = 4,
	D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE = 5
};

struct D3D12_SAMPLER_DESC
{
	D3D12_FILTER Filter;
	D3D12_TEXTURE_ADDRESS_MODE AddressU;
	D3D12_TEXTURE_ADDRESS_MODE AddressV;
	D3D12_TEXTURE_ADDRESS_MODE AddressW;
	float MipLODBias;
	uint32_t MaxAnisotropy;
	D3D12_COMPARISON_FUNC ComparisonFunc;
	float BorderColor[4];
	float MinLOD;
	float MaxLOD;
};


enum class D3D12_BUFFER_UAV_FLAGS
{
	D3D12_BUFFER_UAV_FLAG_NONE = 0,
	D3D12_BUFFER_UAV_FLAG_RAW = 0x1
};

REGIST_ENUM_FLAG(D3D12_BUFFER_UAV_FLAGS);
struct D3D12_BUFFER_UAV
{
	uint64_t FirstElement;
	uint32_t NumElements;
	uint32_t StructureByteStride;
	uint64_t CounterOffsetInBytes;
	D3D12_BUFFER_UAV_FLAGS Flags;
};

struct D3D12_TEX1D_UAV
{
	uint32_t MipSlice;
};

struct D3D12_TEX1D_ARRAY_UAV
{
	uint32_t MipSlice;
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
};

struct D3D12_TEX2D_UAV
{
	uint32_t MipSlice;
	uint32_t PlaneSlice;
};

struct D3D12_TEX2D_ARRAY_UAV
{
	uint32_t MipSlice;
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
	uint32_t PlaneSlice;
};

struct D3D12_TEX3D_UAV
{
	uint32_t MipSlice;
	uint32_t FirstWSlice;
	uint32_t WSize;
};


enum class D3D12_UAV_DIMENSION
{
	D3D12_UAV_DIMENSION_UNKNOWN = 0,
	D3D12_UAV_DIMENSION_BUFFER = 1,
	D3D12_UAV_DIMENSION_TEXTURE1D = 2,
	D3D12_UAV_DIMENSION_TEXTURE1DARRAY = 3,
	D3D12_UAV_DIMENSION_TEXTURE2D = 4,
	D3D12_UAV_DIMENSION_TEXTURE2DARRAY = 5,
	D3D12_UAV_DIMENSION_TEXTURE3D = 8
};

struct D3D12_UNORDERED_ACCESS_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D12_UAV_DIMENSION ViewDimension;
	union
	{
		D3D12_BUFFER_UAV Buffer;
		D3D12_TEX1D_UAV Texture1D;
		D3D12_TEX1D_ARRAY_UAV Texture1DArray;
		D3D12_TEX2D_UAV Texture2D;
		D3D12_TEX2D_ARRAY_UAV Texture2DArray;
		D3D12_TEX3D_UAV Texture3D;
	};
};

struct D3D12_BUFFER_RTV
{
	uint64_t FirstElement;
	uint32_t NumElements;
};

struct D3D12_TEX1D_RTV
{
	uint32_t MipSlice;
};

struct D3D12_TEX1D_ARRAY_RTV
{
	uint32_t MipSlice;
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
};

struct D3D12_TEX2D_RTV
{
	uint32_t MipSlice;
	uint32_t PlaneSlice;
};

struct D3D12_TEX2DMS_RTV
{
	uint32_t UnusedField_NothingToDefine;
};

struct D3D12_TEX2D_ARRAY_RTV
{
	uint32_t MipSlice;
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
	uint32_t PlaneSlice;
};

struct D3D12_TEX2DMS_ARRAY_RTV
{
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
};

struct D3D12_TEX3D_RTV
{
	uint32_t MipSlice;
	uint32_t FirstWSlice;
	uint32_t WSize;
};


enum class D3D12_RTV_DIMENSION
{
	D3D12_RTV_DIMENSION_UNKNOWN = 0,
	D3D12_RTV_DIMENSION_BUFFER = 1,
	D3D12_RTV_DIMENSION_TEXTURE1D = 2,
	D3D12_RTV_DIMENSION_TEXTURE1DARRAY = 3,
	D3D12_RTV_DIMENSION_TEXTURE2D = 4,
	D3D12_RTV_DIMENSION_TEXTURE2DARRAY = 5,
	D3D12_RTV_DIMENSION_TEXTURE2DMS = 6,
	D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
	D3D12_RTV_DIMENSION_TEXTURE3D = 8
};

struct D3D12_RENDER_TARGET_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D12_RTV_DIMENSION ViewDimension;
	union
	{
		D3D12_BUFFER_RTV Buffer;
		D3D12_TEX1D_RTV Texture1D;
		D3D12_TEX1D_ARRAY_RTV Texture1DArray;
		D3D12_TEX2D_RTV Texture2D;
		D3D12_TEX2D_ARRAY_RTV Texture2DArray;
		D3D12_TEX2DMS_RTV Texture2DMS;
		D3D12_TEX2DMS_ARRAY_RTV Texture2DMSArray;
		D3D12_TEX3D_RTV Texture3D;
	};
};

struct D3D12_TEX1D_DSV
{
	uint32_t MipSlice;
};

struct D3D12_TEX1D_ARRAY_DSV
{
	uint32_t MipSlice;
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
};

struct D3D12_TEX2D_DSV
{
	uint32_t MipSlice;
};

struct D3D12_TEX2D_ARRAY_DSV
{
	uint32_t MipSlice;
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
};

struct D3D12_TEX2DMS_DSV
{
	uint32_t UnusedField_NothingToDefine;
};

struct D3D12_TEX2DMS_ARRAY_DSV
{
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
};


enum class D3D12_DSV_FLAGS
{
	D3D12_DSV_FLAG_NONE = 0,
	D3D12_DSV_FLAG_READ_ONLY_DEPTH = 0x1,
	D3D12_DSV_FLAG_READ_ONLY_STENCIL = 0x2
};

REGIST_ENUM_FLAG(D3D12_DSV_FLAGS);

enum class D3D12_DSV_DIMENSION
{
	D3D12_DSV_DIMENSION_UNKNOWN = 0,
	D3D12_DSV_DIMENSION_TEXTURE1D = 1,
	D3D12_DSV_DIMENSION_TEXTURE1DARRAY = 2,
	D3D12_DSV_DIMENSION_TEXTURE2D = 3,
	D3D12_DSV_DIMENSION_TEXTURE2DARRAY = 4,
	D3D12_DSV_DIMENSION_TEXTURE2DMS = 5,
	D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
};

struct D3D12_DEPTH_STENCIL_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D12_DSV_DIMENSION ViewDimension;
	D3D12_DSV_FLAGS Flags;
	union
	{
		D3D12_TEX1D_DSV Texture1D;
		D3D12_TEX1D_ARRAY_DSV Texture1DArray;
		D3D12_TEX2D_DSV Texture2D;
		D3D12_TEX2D_ARRAY_DSV Texture2DArray;
		D3D12_TEX2DMS_DSV Texture2DMS;
		D3D12_TEX2DMS_ARRAY_DSV Texture2DMSArray;
	};
};


enum class D3D12_CLEAR_FLAGS
{
	D3D12_CLEAR_FLAG_DEPTH = 0x1,
	D3D12_CLEAR_FLAG_STENCIL = 0x2
};

REGIST_ENUM_FLAG(D3D12_CLEAR_FLAGS);

enum class D3D12_FENCE_FLAGS
{
	D3D12_FENCE_FLAG_NONE = 0,
	D3D12_FENCE_FLAG_SHARED = 0x1,
	D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER = 0x2,
	D3D12_FENCE_FLAG_NON_MONITORED = 0x4
};

REGIST_ENUM_FLAG(D3D12_FENCE_FLAGS);

enum class D3D12_DESCRIPTOR_HEAP_TYPE
{
	D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV = 0,
	D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER = (D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV + 1),
	D3D12_DESCRIPTOR_HEAP_TYPE_RTV = (D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER + 1),
	D3D12_DESCRIPTOR_HEAP_TYPE_DSV = (D3D12_DESCRIPTOR_HEAP_TYPE_RTV + 1),
	D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES = (D3D12_DESCRIPTOR_HEAP_TYPE_DSV + 1)
};


enum class D3D12_DESCRIPTOR_HEAP_FLAGS
{
	D3D12_DESCRIPTOR_HEAP_FLAG_NONE = 0,
	D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE = 0x1
};

REGIST_ENUM_FLAG(D3D12_DESCRIPTOR_HEAP_FLAGS);
struct D3D12_DESCRIPTOR_HEAP_DESC
{
	D3D12_DESCRIPTOR_HEAP_TYPE Type;
	uint32_t NumDescriptors;
	D3D12_DESCRIPTOR_HEAP_FLAGS Flags;
	uint32_t NodeMask;
};


enum class D3D12_DESCRIPTOR_RANGE_TYPE
{
	D3D12_DESCRIPTOR_RANGE_TYPE_SRV = 0,
	D3D12_DESCRIPTOR_RANGE_TYPE_UAV = (D3D12_DESCRIPTOR_RANGE_TYPE_SRV + 1),
	D3D12_DESCRIPTOR_RANGE_TYPE_CBV = (D3D12_DESCRIPTOR_RANGE_TYPE_UAV + 1),
	D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER = (D3D12_DESCRIPTOR_RANGE_TYPE_CBV + 1)
};

struct D3D12_DESCRIPTOR_RANGE
{
	D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
	uint32_t NumDescriptors;
	uint32_t BaseShaderRegister;
	uint32_t RegisterSpace;
	uint32_t OffsetInDescriptorsFromTableStart;
};

struct D3D12_ROOT_DESCRIPTOR_TABLE
{
	uint32_t NumDescriptorRanges;
	_Field_size_full_(NumDescriptorRanges)  const D3D12_DESCRIPTOR_RANGE* pDescriptorRanges;
};

struct D3D12_ROOT_CONSTANTS
{
	uint32_t ShaderRegister;
	uint32_t RegisterSpace;
	uint32_t Num32BitValues;
};

struct D3D12_ROOT_DESCRIPTOR
{
	uint32_t ShaderRegister;
	uint32_t RegisterSpace;
};


enum class D3D12_SHADER_VISIBILITY
{
	D3D12_SHADER_VISIBILITY_ALL = 0,
	D3D12_SHADER_VISIBILITY_VERTEX = 1,
	D3D12_SHADER_VISIBILITY_HULL = 2,
	D3D12_SHADER_VISIBILITY_DOMAIN = 3,
	D3D12_SHADER_VISIBILITY_GEOMETRY = 4,
	D3D12_SHADER_VISIBILITY_PIXEL = 5
};


enum class D3D12_ROOT_PARAMETER_TYPE
{
	D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE = 0,
	D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS = (D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE + 1),
	D3D12_ROOT_PARAMETER_TYPE_CBV = (D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS + 1),
	D3D12_ROOT_PARAMETER_TYPE_SRV = (D3D12_ROOT_PARAMETER_TYPE_CBV + 1),
	D3D12_ROOT_PARAMETER_TYPE_UAV = (D3D12_ROOT_PARAMETER_TYPE_SRV + 1)
};

struct D3D12_ROOT_PARAMETER
{
	D3D12_ROOT_PARAMETER_TYPE ParameterType;
	union
	{
		D3D12_ROOT_DESCRIPTOR_TABLE DescriptorTable;
		D3D12_ROOT_CONSTANTS Constants;
		D3D12_ROOT_DESCRIPTOR Descriptor;
	};
	D3D12_SHADER_VISIBILITY ShaderVisibility;
};


enum class D3D12_ROOT_SIGNATURE_FLAGS
{
	D3D12_ROOT_SIGNATURE_FLAG_NONE = 0,
	D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT = 0x1,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS = 0x2,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS = 0x4,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS = 0x8,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS = 0x10,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS = 0x20,
	D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT = 0x40,
	D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE = 0x80
};

REGIST_ENUM_FLAG(D3D12_ROOT_SIGNATURE_FLAGS);

enum class D3D12_STATIC_BORDER_COLOR
{
	D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK = 0,
	D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK = (D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK + 1),
	D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE = (D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK + 1)
};

struct D3D12_STATIC_SAMPLER_DESC
{
	D3D12_FILTER Filter;
	D3D12_TEXTURE_ADDRESS_MODE AddressU;
	D3D12_TEXTURE_ADDRESS_MODE AddressV;
	D3D12_TEXTURE_ADDRESS_MODE AddressW;
	float MipLODBias;
	uint32_t MaxAnisotropy;
	D3D12_COMPARISON_FUNC ComparisonFunc;
	D3D12_STATIC_BORDER_COLOR BorderColor;
	float MinLOD;
	float MaxLOD;
	uint32_t ShaderRegister;
	uint32_t RegisterSpace;
	D3D12_SHADER_VISIBILITY ShaderVisibility;
};

struct D3D12_ROOT_SIGNATURE_DESC
{
	uint32_t NumParameters;
	_Field_size_full_(NumParameters)  const D3D12_ROOT_PARAMETER* pParameters;
	uint32_t NumStaticSamplers;
	_Field_size_full_(NumStaticSamplers)  const D3D12_STATIC_SAMPLER_DESC* pStaticSamplers;
	D3D12_ROOT_SIGNATURE_FLAGS Flags;
};


enum class D3D12_DESCRIPTOR_RANGE_FLAGS
{
	D3D12_DESCRIPTOR_RANGE_FLAG_NONE = 0,
	D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE = 0x1,
	D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE = 0x2,
	D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 0x4,
	D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC = 0x8,
	D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS = 0x10000
};

REGIST_ENUM_FLAG(D3D12_DESCRIPTOR_RANGE_FLAGS);
struct D3D12_DESCRIPTOR_RANGE1
{
	D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
	uint32_t NumDescriptors;
	uint32_t BaseShaderRegister;
	uint32_t RegisterSpace;
	D3D12_DESCRIPTOR_RANGE_FLAGS Flags;
	uint32_t OffsetInDescriptorsFromTableStart;
};

struct D3D12_ROOT_DESCRIPTOR_TABLE1
{
	uint32_t NumDescriptorRanges;
	_Field_size_full_(NumDescriptorRanges)  const D3D12_DESCRIPTOR_RANGE1* pDescriptorRanges;
};


enum class D3D12_ROOT_DESCRIPTOR_FLAGS
{
	D3D12_ROOT_DESCRIPTOR_FLAG_NONE = 0,
	D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE = 0x2,
	D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 0x4,
	D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC = 0x8
};

REGIST_ENUM_FLAG(D3D12_ROOT_DESCRIPTOR_FLAGS);
struct D3D12_ROOT_DESCRIPTOR1
{
	uint32_t ShaderRegister;
	uint32_t RegisterSpace;
	D3D12_ROOT_DESCRIPTOR_FLAGS Flags;
};

struct D3D12_ROOT_PARAMETER1
{
	D3D12_ROOT_PARAMETER_TYPE ParameterType;
	union
	{
		D3D12_ROOT_DESCRIPTOR_TABLE1 DescriptorTable;
		D3D12_ROOT_CONSTANTS Constants;
		D3D12_ROOT_DESCRIPTOR1 Descriptor;
	};
	D3D12_SHADER_VISIBILITY ShaderVisibility;
};

struct D3D12_ROOT_SIGNATURE_DESC1
{
	uint32_t NumParameters;
	_Field_size_full_(NumParameters)  const D3D12_ROOT_PARAMETER1* pParameters;
	uint32_t NumStaticSamplers;
	_Field_size_full_(NumStaticSamplers)  const D3D12_STATIC_SAMPLER_DESC* pStaticSamplers;
	D3D12_ROOT_SIGNATURE_FLAGS Flags;
};

struct D3D12_VERSIONED_ROOT_SIGNATURE_DESC
{
	D3D_ROOT_SIGNATURE_VERSION Version;
	union
	{
		D3D12_ROOT_SIGNATURE_DESC Desc_1_0;
		D3D12_ROOT_SIGNATURE_DESC1 Desc_1_1;
	};
};

//抛弃原本的DESCRIPTOR_HANDLE中额外包装的一层结构体，在保证内存布局一致的前提下简化代码复杂度
using D3D12_CPU_DESCRIPTOR_HANDLE = size_t;
using D3D12_GPU_DESCRIPTOR_HANDLE = uint64_t;

// If rects are supplied in D3D12_DISCARD_REGION, below, the resource 
// must have 2D subresources with all specified subresources the same dimension.
struct D3D12_DISCARD_REGION
{
	uint32_t NumRects;
	_In_reads_(NumRects)  const D3D12_RECT* pRects;
	uint32_t FirstSubresource;
	uint32_t NumSubresources;
};


enum class D3D12_QUERY_HEAP_TYPE
{
	D3D12_QUERY_HEAP_TYPE_OCCLUSION = 0,
	D3D12_QUERY_HEAP_TYPE_TIMESTAMP = 1,
	D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS = 2,
	D3D12_QUERY_HEAP_TYPE_SO_STATISTICS = 3,
	D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS = 4,
	D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP = 5
};

struct D3D12_QUERY_HEAP_DESC
{
	D3D12_QUERY_HEAP_TYPE Type;
	uint32_t Count;
	uint32_t NodeMask;
};


enum class D3D12_QUERY_TYPE
{
	D3D12_QUERY_TYPE_OCCLUSION = 0,
	D3D12_QUERY_TYPE_BINARY_OCCLUSION = 1,
	D3D12_QUERY_TYPE_TIMESTAMP = 2,
	D3D12_QUERY_TYPE_PIPELINE_STATISTICS = 3,
	D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0 = 4,
	D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1 = 5,
	D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2 = 6,
	D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3 = 7,
	D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS = 8
};


enum class D3D12_PREDICATION_OP
{
	D3D12_PREDICATION_OP_EQUAL_ZERO = 0,
	D3D12_PREDICATION_OP_NOT_EQUAL_ZERO = 1
};

struct D3D12_QUERY_DATA_PIPELINE_STATISTICS
{
	uint64_t IAVertices;
	uint64_t IAPrimitives;
	uint64_t VSInvocations;
	uint64_t GSInvocations;
	uint64_t GSPrimitives;
	uint64_t CInvocations;
	uint64_t CPrimitives;
	uint64_t PSInvocations;
	uint64_t HSInvocations;
	uint64_t DSInvocations;
	uint64_t CSInvocations;
};

struct D3D12_QUERY_DATA_SO_STATISTICS
{
	uint64_t NumPrimitivesWritten;
	uint64_t PrimitivesStorageNeeded;
};

struct D3D12_STREAM_OUTPUT_BUFFER_VIEW
{
	D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
	uint64_t SizeInBytes;
	D3D12_GPU_VIRTUAL_ADDRESS BufferFilledSizeLocation;
};

struct D3D12_DRAW_ARGUMENTS
{
	uint32_t VertexCountPerInstance;
	uint32_t InstanceCount;
	uint32_t StartVertexLocation;
	uint32_t StartInstanceLocation;
};

struct D3D12_DRAW_INDEXED_ARGUMENTS
{
	uint32_t IndexCountPerInstance;
	uint32_t InstanceCount;
	uint32_t StartIndexLocation;
	int32_t BaseVertexLocation;
	uint32_t StartInstanceLocation;
};

struct D3D12_DISPATCH_ARGUMENTS
{
	uint32_t ThreadGroupCountX;
	uint32_t ThreadGroupCountY;
	uint32_t ThreadGroupCountZ;
};

struct D3D12_VERTEX_BUFFER_VIEW
{
	D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
	uint32_t SizeInBytes;
	uint32_t StrideInBytes;
};

struct D3D12_INDEX_BUFFER_VIEW
{
	D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
	uint32_t SizeInBytes;
	DXGI_FORMAT Format;
};


enum class D3D12_INDIRECT_ARGUMENT_TYPE
{
	D3D12_INDIRECT_ARGUMENT_TYPE_DRAW = 0,
	D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED = (D3D12_INDIRECT_ARGUMENT_TYPE_DRAW + 1),
	D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH = (D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED + 1),
	D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH + 1),
	D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW + 1),
	D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT = (D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW + 1),
	D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT + 1),
	D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW + 1),
	D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW + 1)
};

struct D3D12_INDIRECT_ARGUMENT_DESC
{
	D3D12_INDIRECT_ARGUMENT_TYPE Type;
	union
	{
		struct
		{
			uint32_t Slot;
		};
		struct
		{
			uint32_t RootParameterIndex;
			uint32_t DestOffsetIn32BitValues;
			uint32_t Num32BitValuesToSet;
		};
		struct
		{
			uint32_t RootParameterIndex;
		};
		struct
		{
			uint32_t RootParameterIndex;
		};
		struct
		{
			uint32_t RootParameterIndex;
		};
	};
};

struct D3D12_COMMAND_SIGNATURE_DESC
{
	uint32_t ByteStride;
	uint32_t NumArgumentDescs;
	_Field_size_full_(NumArgumentDescs)  const D3D12_INDIRECT_ARGUMENT_DESC* pArgumentDescs;
	uint32_t NodeMask;
};


struct D3D12_WRITEBUFFERIMMEDIATE_PARAMETER
{
	D3D12_GPU_VIRTUAL_ADDRESS Dest;
	uint32_t Value;
};


enum class D3D12_WRITEBUFFERIMMEDIATE_MODE
{
	D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT = 0,
	D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN = 0x1,
	D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT = 0x2
};

enum class D3D12_MULTIPLE_FENCE_WAIT_FLAGS
{
	D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE = 0,
	D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY = 0x1,
	D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL = 0
};

REGIST_ENUM_FLAG(D3D12_MULTIPLE_FENCE_WAIT_FLAGS);

enum class D3D12_RESIDENCY_PRIORITY : uint32_t
{
	D3D12_RESIDENCY_PRIORITY_MINIMUM = 0x28000000,
	D3D12_RESIDENCY_PRIORITY_LOW = 0x50000000,
	D3D12_RESIDENCY_PRIORITY_NORMAL = 0x78000000,
	D3D12_RESIDENCY_PRIORITY_HIGH = 0xa0010000,
	D3D12_RESIDENCY_PRIORITY_MAXIMUM = 0xc8000000
};

enum class D3D12_RESIDENCY_FLAGS
{
	D3D12_RESIDENCY_FLAG_NONE = 0,
	D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET = 0x1
};

REGIST_ENUM_FLAG(D3D12_RESIDENCY_FLAGS);

enum class D3D12_COMMAND_LIST_FLAGS
{
	D3D12_COMMAND_LIST_FLAG_NONE = 0
};

REGIST_ENUM_FLAG(D3D12_COMMAND_LIST_FLAGS);

enum class D3D12_COMMAND_POOL_FLAGS
{
	D3D12_COMMAND_POOL_FLAG_NONE = 0
};

REGIST_ENUM_FLAG(D3D12_COMMAND_POOL_FLAGS);

enum class D3D12_COMMAND_RECORDER_FLAGS
{
	D3D12_COMMAND_RECORDER_FLAG_NONE = 0
};

REGIST_ENUM_FLAG(D3D12_COMMAND_RECORDER_FLAGS);

enum class D3D12_PROTECTED_SESSION_STATUS
{
	D3D12_PROTECTED_SESSION_STATUS_OK = 0,
	D3D12_PROTECTED_SESSION_STATUS_INVALID = 1
};


enum class D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS
{
	D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE = 0,
	D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED = 0x1
};

REGIST_ENUM_FLAG(D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS);
struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT
{
	uint32_t NodeIndex;
	D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS Support;
};


enum class D3D12_PROTECTED_RESOURCE_SESSION_FLAGS
{
	D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE = 0
};

REGIST_ENUM_FLAG(D3D12_PROTECTED_RESOURCE_SESSION_FLAGS);
struct D3D12_PROTECTED_RESOURCE_SESSION_DESC
{
	uint32_t NodeMask;
	D3D12_PROTECTED_RESOURCE_SESSION_FLAGS Flags;
};

enum class D3D12_LIFETIME_STATE
{
	D3D12_LIFETIME_STATE_IN_USE = 0,
	D3D12_LIFETIME_STATE_NOT_IN_USE = (D3D12_LIFETIME_STATE_IN_USE + 1)
};

enum class D3D12_META_COMMAND_PARAMETER_TYPE
{
	D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT = 0,
	D3D12_META_COMMAND_PARAMETER_TYPE_uint64_t = 1,
	D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS = 2,
	D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 3,
	D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 4
};


enum class D3D12_META_COMMAND_PARAMETER_FLAGS
{
	D3D12_META_COMMAND_PARAMETER_FLAG_INPUT = 0x1,
	D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT = 0x2
};

REGIST_ENUM_FLAG(D3D12_META_COMMAND_PARAMETER_FLAGS);

enum class D3D12_META_COMMAND_PARAMETER_STAGE
{
	D3D12_META_COMMAND_PARAMETER_STAGE_CREATION = 0,
	D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1,
	D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION = 2
};

struct D3D12_META_COMMAND_PARAMETER_DESC
{
	const wchar_t* Name;
	D3D12_META_COMMAND_PARAMETER_TYPE Type;
	D3D12_META_COMMAND_PARAMETER_FLAGS Flags;
	D3D12_RESOURCE_STATES RequiredResourceState;
	uint32_t StructureOffset;
};


enum class D3D12_GRAPHICS_STATES
{
	D3D12_GRAPHICS_STATE_NONE = 0,
	D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS = (1 << 0),
	D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER = (1 << 1),
	D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY = (1 << 2),
	D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP = (1 << 3),
	D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE = (1 << 4),
	D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE = (1 << 5),
	D3D12_GRAPHICS_STATE_RS_VIEWPORTS = (1 << 6),
	D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS = (1 << 7),
	D3D12_GRAPHICS_STATE_PREDICATION = (1 << 8),
	D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS = (1 << 9),
	D3D12_GRAPHICS_STATE_OM_STENCIL_REF = (1 << 10),
	D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR = (1 << 11),
	D3D12_GRAPHICS_STATE_PIPELINE_STATE = (1 << 12),
	D3D12_GRAPHICS_STATE_SO_TARGETS = (1 << 13),
	D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS = (1 << 14),
	D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS = (1 << 15),
	D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK = (1 << 16)
};

REGIST_ENUM_FLAG(D3D12_GRAPHICS_STATES);
struct D3D12_META_COMMAND_DESC
{
	GUID Id;
	const wchar_t* Name;
	D3D12_GRAPHICS_STATES InitializationDirtyState;
	D3D12_GRAPHICS_STATES ExecutionDirtyState;
};

enum class D3D12_STATE_SUBOBJECT_TYPE
{
	D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG = 0,
	D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE = 1,
	D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE = 2,
	D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK = 3,
	D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY = 5,
	D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION = 6,
	D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 7,
	D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 8,
	D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG = 9,
	D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG = 10,
	D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP = 11,
	D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID = (D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP + 1)
};

struct D3D12_STATE_SUBOBJECT
{
	D3D12_STATE_SUBOBJECT_TYPE Type;
	const void* pDesc;
};


enum class D3D12_STATE_OBJECT_FLAGS
{
	D3D12_STATE_OBJECT_FLAG_NONE = 0,
	D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS = 0x1,
	D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS = 0x2
};

REGIST_ENUM_FLAG(D3D12_STATE_OBJECT_FLAGS);
struct D3D12_STATE_OBJECT_CONFIG
{
	D3D12_STATE_OBJECT_FLAGS Flags;
};

struct D3D12_GLOBAL_ROOT_SIGNATURE
{
	void* pGlobalRootSignature;
};

struct D3D12_LOCAL_ROOT_SIGNATURE
{
	void* pLocalRootSignature;
};

struct D3D12_NODE_MASK
{
	uint32_t NodeMask;
};


enum class D3D12_EXPORT_FLAGS
{
	D3D12_EXPORT_FLAG_NONE = 0
};

REGIST_ENUM_FLAG(D3D12_EXPORT_FLAGS);
struct D3D12_EXPORT_DESC
{
	const wchar_t* Name;
	_In_opt_  const wchar_t* ExportToRename;
	D3D12_EXPORT_FLAGS Flags;
};

struct D3D12_DXIL_LIBRARY_DESC
{
	D3D12_SHADER_BYTECODE DXILLibrary;
	uint32_t NumExports;
	_In_reads_(NumExports)  D3D12_EXPORT_DESC* pExports;
};

struct D3D12_EXISTING_COLLECTION_DESC
{
	void* pExistingCollection;
	uint32_t NumExports;
	_In_reads_(NumExports)  D3D12_EXPORT_DESC* pExports;
};

struct D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION
{
	const D3D12_STATE_SUBOBJECT* pSubobjectToAssociate;
	uint32_t NumExports;
	_In_reads_(NumExports)  const wchar_t** pExports;
};

struct D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION
{
	const wchar_t* SubobjectToAssociate;
	uint32_t NumExports;
	_In_reads_(NumExports)  const wchar_t** pExports;
};


enum class D3D12_HIT_GROUP_TYPE
{
	D3D12_HIT_GROUP_TYPE_TRIANGLES = 0,
	D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE = 0x1
};

struct D3D12_HIT_GROUP_DESC
{
	const wchar_t* HitGroupExport;
	D3D12_HIT_GROUP_TYPE Type;
	_In_opt_  const wchar_t* AnyHitShaderImport;
	_In_opt_  const wchar_t* ClosestHitShaderImport;
	_In_opt_  const wchar_t* IntersectionShaderImport;
};

struct D3D12_RAYTRACING_SHADER_CONFIG
{
	uint32_t MaxPayloadSizeInBytes;
	uint32_t MaxAttributeSizeInBytes;
};

struct D3D12_RAYTRACING_PIPELINE_CONFIG
{
	uint32_t MaxTraceRecursionDepth;
};


enum class D3D12_STATE_OBJECT_TYPE
{
	D3D12_STATE_OBJECT_TYPE_COLLECTION = 0,
	D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE = 3
};

struct D3D12_STATE_OBJECT_DESC
{
	D3D12_STATE_OBJECT_TYPE Type;
	uint32_t NumSubobjects;
	_In_reads_(NumSubobjects)  const D3D12_STATE_SUBOBJECT* pSubobjects;
};


enum class D3D12_RAYTRACING_GEOMETRY_FLAGS
{
	D3D12_RAYTRACING_GEOMETRY_FLAG_NONE = 0,
	D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE = 0x1,
	D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION = 0x2
};

REGIST_ENUM_FLAG(D3D12_RAYTRACING_GEOMETRY_FLAGS);

enum class D3D12_RAYTRACING_GEOMETRY_TYPE
{
	D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES = 0,
	D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS = (D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES + 1)
};


enum class D3D12_RAYTRACING_INSTANCE_FLAGS
{
	D3D12_RAYTRACING_INSTANCE_FLAG_NONE = 0,
	D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE = 0x1,
	D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE = 0x2,
	D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE = 0x4,
	D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE = 0x8
};

REGIST_ENUM_FLAG(D3D12_RAYTRACING_INSTANCE_FLAGS);
struct D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE
{
	D3D12_GPU_VIRTUAL_ADDRESS StartAddress;
	uint64_t StrideInBytes;
};

struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE
{
	D3D12_GPU_VIRTUAL_ADDRESS StartAddress;
	uint64_t SizeInBytes;
};

struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE
{
	D3D12_GPU_VIRTUAL_ADDRESS StartAddress;
	uint64_t SizeInBytes;
	uint64_t StrideInBytes;
};

struct D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC
{
	D3D12_GPU_VIRTUAL_ADDRESS Transform3x4;
	DXGI_FORMAT IndexFormat;
	DXGI_FORMAT VertexFormat;
	uint32_t IndexCount;
	uint32_t VertexCount;
	D3D12_GPU_VIRTUAL_ADDRESS IndexBuffer;
	D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE VertexBuffer;
};

struct D3D12_RAYTRACING_AABB
{
	float MinX;
	float MinY;
	float MinZ;
	float MaxX;
	float MaxY;
	float MaxZ;
};

struct D3D12_RAYTRACING_GEOMETRY_AABBS_DESC
{
	uint64_t AABBCount;
	D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE AABBs;
};


enum class D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS
{
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE = 0,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE = 0x1,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION = 0x2,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE = 0x4,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD = 0x8,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY = 0x10,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE = 0x20
};

REGIST_ENUM_FLAG(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS);

enum class D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE
{
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE = 0,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT = 0x1,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS = 0x2,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE = 0x3,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE = 0x4
};


enum class D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE
{
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL = 0,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL = 0x1
};


enum class D3D12_ELEMENTS_LAYOUT
{
	D3D12_ELEMENTS_LAYOUT_ARRAY = 0,
	D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS = 0x1
};


enum class D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE
{
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE = 0,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION = 0x1,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION = 0x2,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE = 0x3
};

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC
{
	D3D12_GPU_VIRTUAL_ADDRESS DestBuffer;
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE InfoType;
};

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC
{
	uint64_t CompactedSizeInBytes;
};

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
{
	uint64_t DecodedSizeInBytes;
};

struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER
{
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;
	uint32_t NumDescs;
};

// Regarding D3D12_BUILD_RAY_TRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER above,
// depending on Type field, NumDescs above is followed by either:
//       D3D12_RAY_TRACING_INSTANCE_DESC InstanceDescs[NumDescs]
//    or D3D12_RAY_TRACING_GEOMETRY_DESC GeometryDescs[NumDescs].
// There is 4 bytes of padding between GeometryDesc structs in the array so alignment is natural when viewed by CPU.

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
{
	uint64_t SerializedSizeInBytes;
	uint64_t NumBottomLevelAccelerationStructurePointers;
};

struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER
{
	GUID DriverOpaqueGUID;
	uint8_t DriverOpaqueVersioningData[16];
};


enum class D3D12_SERIALIZED_DATA_TYPE
{
	D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE = 0
};


enum class D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
{
	D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE = 0,
	D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE = 0x1,
	D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED = 0x2,
	D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION = 0x3,
	D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE = 0x4
};

struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER
{
	D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER DriverMatchingIdentifier;
	uint64_t SerializedSizeInBytesIncludingHeader;
	uint64_t DeserializedSizeInBytes;
	uint64_t NumBottomLevelAccelerationStructurePointersAfterHeader;
};

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
{
	uint64_t CurrentSizeInBytes;
};

struct D3D12_RAYTRACING_INSTANCE_DESC
{
	float Transform[3][4];
	uint32_t InstanceID : 24;
	uint32_t InstanceMask : 8;
	uint32_t InstanceContributionToHitGroupIndex : 24;
	uint32_t Flags : 8;
	D3D12_GPU_VIRTUAL_ADDRESS AccelerationStructure;
};

struct D3D12_RAYTRACING_GEOMETRY_DESC
{
	D3D12_RAYTRACING_GEOMETRY_TYPE Type;
	D3D12_RAYTRACING_GEOMETRY_FLAGS Flags;
	union
	{
		D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC Triangles;
		D3D12_RAYTRACING_GEOMETRY_AABBS_DESC AABBs;
	};
};

struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS
{
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS Flags;
	uint32_t NumDescs;
	D3D12_ELEMENTS_LAYOUT DescsLayout;
	union
	{
		D3D12_GPU_VIRTUAL_ADDRESS InstanceDescs;
		const D3D12_RAYTRACING_GEOMETRY_DESC* pGeometryDescs;
		const D3D12_RAYTRACING_GEOMETRY_DESC* const* ppGeometryDescs;
	};
};

struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC
{
	D3D12_GPU_VIRTUAL_ADDRESS DestAccelerationStructureData;
	D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS Inputs;
	_In_opt_  D3D12_GPU_VIRTUAL_ADDRESS SourceAccelerationStructureData;
	D3D12_GPU_VIRTUAL_ADDRESS ScratchAccelerationStructureData;
};

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO
{
	uint64_t ResultDataMaxSizeInBytes;
	uint64_t ScratchDataSizeInBytes;
	uint64_t UpdateScratchDataSizeInBytes;
};


enum class D3D12_RAY_FLAGS
{
	D3D12_RAY_FLAG_NONE = 0,
	D3D12_RAY_FLAG_FORCE_OPAQUE = 0x1,
	D3D12_RAY_FLAG_FORCE_NON_OPAQUE = 0x2,
	D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH = 0x4,
	D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER = 0x8,
	D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES = 0x10,
	D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES = 0x20,
	D3D12_RAY_FLAG_CULL_OPAQUE = 0x40,
	D3D12_RAY_FLAG_CULL_NON_OPAQUE = 0x80
};

REGIST_ENUM_FLAG(D3D12_RAY_FLAGS);

enum class D3D12_HIT_KIND
{
	D3D12_HIT_KIND_TRIANGLE_FRONT_FACE = 0xfe,
	D3D12_HIT_KIND_TRIANGLE_BACK_FACE = 0xff
};

enum class D3D12_AUTO_BREADCRUMB_OP
{
	D3D12_AUTO_BREADCRUMB_OP_SETMARKER = 0,
	D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT = 1,
	D3D12_AUTO_BREADCRUMB_OP_ENDEVENT = 2,
	D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED = 3,
	D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED = 4,
	D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT = 5,
	D3D12_AUTO_BREADCRUMB_OP_DISPATCH = 6,
	D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION = 7,
	D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION = 8,
	D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE = 9,
	D3D12_AUTO_BREADCRUMB_OP_COPYTILES = 10,
	D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE = 11,
	D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW = 12,
	D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW = 13,
	D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW = 14,
	D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER = 15,
	D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE = 16,
	D3D12_AUTO_BREADCRUMB_OP_PRESENT = 17,
	D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA = 18,
	D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION = 19,
	D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION = 20,
	D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME = 21,
	D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES = 22,
	D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT = 23,
	D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERuint64_t = 24,
	D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION = 25,
	D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE = 26,
	D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1 = 27,
	D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION = 28,
	D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2 = 29,
	D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1 = 30,
	D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE = 31,
	D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO = 32,
	D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE = 33,
	D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS = 34,
	D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND = 35,
	D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND = 36,
	D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION = 37,
	D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP = 38,
	D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1 = 39
};

struct D3D12_AUTO_BREADCRUMB_NODE
{
	const char* pCommandListDebugNameA;
	const wchar_t* pCommandListDebugNameW;
	const char* pCommandQueueDebugNameA;
	const wchar_t* pCommandQueueDebugNameW;
	void* pCommandList;
	void* pCommandQueue;
	uint32_t BreadcrumbCount;
	uint32_t* pLastBreadcrumbValue;
	D3D12_AUTO_BREADCRUMB_OP* pCommandHistory;
	struct D3D12_AUTO_BREADCRUMB_NODE* pNext;
};


enum class D3D12_DRED_VERSION
{
	D3D12_DRED_VERSION_1_0 = 0x1
};


enum class D3D12_DRED_FLAGS
{
	D3D12_DRED_FLAG_NONE = 0,
	D3D12_DRED_FLAG_FORCE_ENABLE = 1,
	D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS = 2
};

REGIST_ENUM_FLAG(D3D12_DRED_FLAGS);
struct D3D12_DEVICE_REMOVED_EXTENDED_DATA
{
	_In_  D3D12_DRED_FLAGS Flags;
	_Out_  D3D12_AUTO_BREADCRUMB_NODE* pHeadAutoBreadcrumbNode;
};

struct D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA
{
	D3D12_DRED_VERSION Version;
	union
	{
		D3D12_DEVICE_REMOVED_EXTENDED_DATA Dred_1_0;
	};
};

enum class D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE
{
	D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD = 0,
	D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE = (D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD + 1),
	D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR = (D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE + 1),
	D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS = (D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR + 1)
};

struct D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS
{
	D3D12_CLEAR_VALUE ClearValue;
};

struct D3D12_RENDER_PASS_BEGINNING_ACCESS
{
	D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE Type;
	union
	{
		D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS Clear;
	};
};


enum class D3D12_RENDER_PASS_ENDING_ACCESS_TYPE
{
	D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD = 0,
	D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE = (D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD + 1),
	D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE = (D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE + 1),
	D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS = (D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE + 1)
};

struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS
{
	uint32_t SrcSubresource;
	uint32_t DstSubresource;
	uint32_t DstX;
	uint32_t DstY;
	D3D12_RECT SrcRect;
};

struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS
{
	void* pSrcResource;
	void* pDstResource;
	uint32_t SubresourceCount;
	_Field_size_full_(SubresourceCount)  const D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS* pSubresourceParameters;
	DXGI_FORMAT Format;
	D3D12_RESOLVE_MODE ResolveMode;
	uint32_t PreserveResolveSource;
};

struct D3D12_RENDER_PASS_ENDING_ACCESS
{
	D3D12_RENDER_PASS_ENDING_ACCESS_TYPE Type;
	union
	{
		D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS Resolve;
	};
};

struct D3D12_RENDER_PASS_RENDER_TARGET_DESC
{
	D3D12_CPU_DESCRIPTOR_HANDLE cpuDescriptor;
	D3D12_RENDER_PASS_BEGINNING_ACCESS BeginningAccess;
	D3D12_RENDER_PASS_ENDING_ACCESS EndingAccess;
};

struct D3D12_RENDER_PASS_DEPTH_STENCIL_DESC
{
	D3D12_CPU_DESCRIPTOR_HANDLE cpuDescriptor;
	D3D12_RENDER_PASS_BEGINNING_ACCESS DepthBeginningAccess;
	D3D12_RENDER_PASS_BEGINNING_ACCESS StencilBeginningAccess;
	D3D12_RENDER_PASS_ENDING_ACCESS DepthEndingAccess;
	D3D12_RENDER_PASS_ENDING_ACCESS StencilEndingAccess;
};


enum class D3D12_RENDER_PASS_FLAGS
{
	D3D12_RENDER_PASS_FLAG_NONE = 0,
	D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES = 0x1,
	D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS = 0x2,
	D3D12_RENDER_PASS_FLAG_RESUMING_PASS = 0x4
};

REGIST_ENUM_FLAG(D3D12_RENDER_PASS_FLAGS);

struct D3D12_DISPATCH_RAYS_DESC
{
	D3D12_GPU_VIRTUAL_ADDRESS_RANGE RayGenerationShaderRecord;
	D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE MissShaderTable;
	D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE HitGroupTable;
	D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE CallableShaderTable;
	uint32_t Width;
	uint32_t Height;
	uint32_t Depth;
};

struct D3D12_SUBRESOURCE_DATA
{
	const void* pData;
	intptr_t RowPitch;
	intptr_t SlicePitch;
};

struct D3D12_MEMCPY_DEST
{
	void* pData;
	size_t RowPitch;
	size_t SlicePitch;
};
