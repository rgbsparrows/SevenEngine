#include "D3D12EnumConvertor.h"

D3D12_FILTER ConvertFilterToD3D12(ERDIFilter _filter) noexcept
{
	return static_cast<D3D12_FILTER>(_filter);
}

D3D12_TEXTURE_ADDRESS_MODE ConvertAddressModeToD3D12(ERDIAddressMode _addressMode) noexcept
{
	return static_cast<D3D12_TEXTURE_ADDRESS_MODE>(_addressMode);
}

D3D12_COMPARISON_FUNC ConvertComparisonFuncToD3D12(ERDIComparisonFunc _comparisionFunc) noexcept
{
	return static_cast<D3D12_COMPARISON_FUNC>(EnumToInt(_comparisionFunc) + 1);
}

D3D12_HEAP_TYPE ConvertHeapTypeToD3D12(ERDIHeapType _heapType) noexcept
{
	return static_cast<D3D12_HEAP_TYPE>(EnumToInt(_heapType) + 1);
}

D3D12_RESOURCE_STATES ConvertResourceStateToD3D12(ERDIResourceState _state) noexcept
{
	static constexpr D3D12_RESOURCE_STATES resourceStateMap[EnumToInt(ERDIResourceState::Num)] =
	{
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_COMMON,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_INDEX_BUFFER,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_RENDER_TARGET,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_UNORDERED_ACCESS,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_DEPTH_WRITE,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_DEPTH_READ,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_STREAM_OUT,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_COPY_DEST,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_COPY_SOURCE,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_RESOLVE_DEST,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_RESOLVE_SOURCE,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_GENERIC_READ,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_PRESENT,
		D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_PREDICATION,
	};

	return resourceStateMap[EnumToInt(_state)];
}

D3D12_SHADER_VISIBILITY ConvertShaderVisibilityToD3D12(ERDIShaderVisibility _visibility) noexcept
{
	return static_cast<D3D12_SHADER_VISIBILITY>(_visibility);
}

D3D12_STATIC_BORDER_COLOR ConvertStaticBorderColorToD3D12(ERDIStaticBorderColor _staticBorderColor) noexcept
{
	return static_cast<D3D12_STATIC_BORDER_COLOR>(_staticBorderColor);
}

D3D12_BLEND ConvertBlendFactoryToD3D12(ERDIBlendFactory _blendFactory) noexcept
{
	return static_cast<D3D12_BLEND>(EnumToInt(_blendFactory) + 1);
}

D3D12_BLEND_OP ConvertBlendOperatorToD3D12(ERDIBlendOperator _blendOperator) noexcept
{
	return static_cast<D3D12_BLEND_OP>(EnumToInt(_blendOperator) + 1);
}

D3D12_LOGIC_OP ConvertLogicOperatorToD3D12(ERDILogicOperator _logicOperator) noexcept
{
	return static_cast<D3D12_LOGIC_OP>(_logicOperator);
}

D3D12_COLOR_WRITE_ENABLE ConvertColorWriteMaskToD3D12(ERDIColorWriteMask _colorWriteMask) noexcept
{
	return static_cast<D3D12_COLOR_WRITE_ENABLE>(EnumToInt(_colorWriteMask));
}

D3D12_FILL_MODE ConvertFillModeToD3D12(ERDIFillMode _fillMode) noexcept
{
	return static_cast<D3D12_FILL_MODE>(EnumToInt(_fillMode) + 2);
}

D3D12_CULL_MODE ConvertCullModeToD3D12(ERDICullMode _cullMode) noexcept
{
	return static_cast<D3D12_CULL_MODE>(EnumToInt(_cullMode) + 1);
}

D3D12_CONSERVATIVE_RASTERIZATION_MODE ConvertConservativeRasterizationModeToD3D12(ERDIConservativeRasterizationMode _conservativeRasterizationMode) noexcept
{
	return static_cast<D3D12_CONSERVATIVE_RASTERIZATION_MODE>(_conservativeRasterizationMode);
}

D3D12_STENCIL_OP ConvertStencilOpToD3D12(ERDIStencilOperator _stencilOperator) noexcept
{
	return static_cast<D3D12_STENCIL_OP>(EnumToInt(_stencilOperator) + 1);
}

D3D12_PRIMITIVE_TOPOLOGY_TYPE ConvertPrimitiveTopologyTypeToD3D12(ERDIPrimitiveTopologyType _primitiveTopologyType) noexcept
{
	return static_cast<D3D12_PRIMITIVE_TOPOLOGY_TYPE>(_primitiveTopologyType);
}

D3D12_PRIMITIVE_TOPOLOGY ConvertPrimitiveTopologyToD3D12(ERDIPrimitiveTopology _primitiveTopology) noexcept
{
	static constexpr D3D12_PRIMITIVE_TOPOLOGY primitiveTopologtMap[EnumToInt(ERDIPrimitiveTopology::Num)] =
	{
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_LINELIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
		D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST,
	};

	return primitiveTopologtMap[EnumToInt(_primitiveTopology)];
}

D3D12_CLEAR_FLAGS ConvertClearFlagToD3D12(ERDIClearFlag _clearFlag) noexcept
{
	return static_cast<D3D12_CLEAR_FLAGS>(_clearFlag);
}

D3D12_COMMAND_LIST_TYPE ConvertCommandListTypeToD3D12(ERDICommandListType _commandListType) noexcept
{
	static constexpr D3D12_COMMAND_LIST_TYPE commandListTypeMap[EnumToInt(ERDICommandListType::Num)] = 
	{
		D3D12_COMMAND_LIST_TYPE_DIRECT,
		D3D12_COMMAND_LIST_TYPE_COMPUTE,
	};

	return commandListTypeMap[EnumToInt(_commandListType)];
}
